#include "touch.h"
#include "sys.h"
#include "interface.h"
#include "delay.h"


//variable
struct tp_pix_  tp_pixad, tp_pixlcd; //当前触控坐标的AD值,前触控坐标的像素值
/***********************
T_BUSY  PB0
T_IQR   PB1
T_CS    PB2
T_SCK   PB3
T_MISO  PB4
T_MOSI  PB5
***********************/

//TP_Init,引脚初始化
u8 TP_Init(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 //使能PB端口时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);      //使用复用功能，因为用到PB3和PB4
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);  //JTAG-DP 失能 + SW-DP 使能
	
	//PB0--T_BUSY  PB2--T_CS   PB5--T_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_2|GPIO_Pin_5;				 // PB端口配置
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	//PB3--T_SCK
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;   //PB3
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	//PB4--T_MISO
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;				 // PB4端口配置
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 		 //上拉输入
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;   //PB3
//	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	//PB1--T_IQR
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;  //触摸触发信号
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	
}

//判断是否触摸
u8 tpstate(void)
{
    return  Penirq;
}
//画一个触摸点
//用来校准用的
void Drow_Touch_Point(u16 x, u16 y)
{
	GUI_SetColor(GUI_WHITE);  //白色
    GUI_DrawHLine(y,x - 12,x + 13); //横线
    GUI_DrawVLine(x, y - 12,y + 13); //竖线

    GUI_DrawCircle(x,y,6);//画中心圈
}
////////////////////////////////////////////////////////////

static void WR_CMD (unsigned char cmd) 
{
    unsigned char buf;
    unsigned char i;
//     TP_CS(1);
    TP_DIN = 0;
    TP_DCLK = 0;
//     TP_CS(0);
    for(i=0;i<8;i++) 
    {
        buf=(cmd>>(7-i))&0x1;
        TP_DIN = buf;
        //Delayus(5);
        TP_DCLK = 1;
        //Delayus(5);
        TP_DCLK = 0;
    }
}
//====================================================================================
static unsigned short RD_AD(void) 
{
    unsigned short buf=0,temp;
    unsigned char i;
    TP_DIN = 0;
    TP_DCLK = 1;
    for(i=0;i<12;i++) 
    {
        TP_DCLK = 0;          
        temp= (TP_DOUT) ? 1:0;
        buf|=(temp<<(11-i));
        //Delayus(5);
        TP_DCLK = 1;
    }
//     TP_CS(1);
    buf&=0x0fff;
    return(buf);
} 	 			    					   
//SPI写数据
//向触摸屏IC写入1byte数据    
//num:要写入的数据
void TP_Write_Byte(u8 num)    
{  
	u8 count=0;   
	for(count=0;count<8;count++)  
	{ 	  
		if(num&0x80)TDIN=1;  
		else TDIN=0;   
		num<<=1;    
		TCLK=0; 
		delay_us(1);
		TCLK=1;		//上升沿有效	        
	}		 			    
} 

u16 TP_Read_XOY2(u8 xy)
{
	int i[5],temp;
	u8 cou=0,k=0;
	WR_CMD(xy);
	RD_AD();
	while(cou<5)	//循环读数5次
	{	
		WR_CMD(xy); 
		cou++;	
		i[cou]=RD_AD();		  
	}
        //将数据升序排列
	for(k=0;k<4;k++)
	{	  
		for(cou=1;cou<5-k;cou++)
		{
			if(i[cou]>i[cou+1])
			{
				temp=i[cou+1];
				i[cou+1]=i[cou];
				i[cou]=temp;
			}  
		}
	}
	return (i[1]+i[2]+i[3])/3;
}








//SPI读数据 
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据	   
u16 TP_Read_AD(u8 CMD)	  
{ 	 
	u8 count=0; 	  
	u16 Num=0; 
	TCLK=0;		//先拉低时钟 	 
	TDIN=0; 	//拉低数据线
	TCS=0; 		//选中触摸屏IC
	TP_Write_Byte(CMD);//发送命令字
	delay_us(6);//ADS7846的转换时间最长为6us
	TCLK=0; 	     	    
	delay_us(1);    	   
	TCLK=1;		//给1个时钟，清除BUSY
	delay_us(1);    
	TCLK=0; 	     	    
	for(count=0;count<16;count++)//读出16位数据,只有高12位有效 
	{ 				  
		Num<<=1; 	 
		TCLK=0;	//下降沿有效  	    	   
		delay_us(1);    
 		TCLK=1;
 		if(DOUT)Num++; 		 
	}  	
	Num>>=4;   	//只有高12位有效.
	TCS=1;		//释放片选	 
	return(Num);   
}
//读取一个坐标值(x或者y)
//连续读取READ_TIMES次数据,对这些数据升序排列,
//然后去掉最低和最高LOST_VAL个数,取平均值 
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 10 	//读取次数
#define LOST_VAL 2	  	//丢弃值
u16 TP_Read_XOY(u8 xy)
{
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum=0;
	u16 temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);		 		    
	for(i=0;i<READ_TIMES-1; i++)//排序
	{
		for(j=i+1;j<READ_TIMES;j++)
		{
			if(buf[i]>buf[j])//升序排列
			{
				temp=buf[i];
				buf[i]=buf[j];
				buf[j]=temp;
			}
		}
	}	  
	sum=0;
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
	temp=sum/(READ_TIMES-2*LOST_VAL);
	return temp;   
} 
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
u8 TP_Read_XY(u16 *x,u16 *y)
{
	u16 xtemp,ytemp;			 	 		  
	xtemp=TP_Read_XOY(CMD_RDX);
	ytemp=TP_Read_XOY(CMD_RDY);	  												   
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x=xtemp;
	*y=ytemp;
	return 1;//读数成功
}
//连续2次读取触摸屏IC,且这两次的偏差不能超过
//ERR_RANGE,满足条件,则认为读数正确,否则读数错误.	   
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围 
u8 TP_Read_XY2(u16 *x,u16 *y) 
{
	u16 x1,y1;
 	u16 x2,y2;
 	u8 flag;    
    flag=TP_Read_XY(&x1,&y1);   
    if(flag==0)return(0);
    flag=TP_Read_XY(&x2,&y2);	   
    if(flag==0)return(0);   
    if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
        return 1;
    }else return 0;	  
}  

//触摸屏校准代码
//得到四个校准参数
#define tp_pianyi 50   //校准坐标偏移量 
#define tp_xiaozhun 1000   //校准精度
void Touch_Adjust(void)
{
	u16 x1, y1;
	u16 pos_temp[4][2];//坐标缓存值
	u8  cnt=0;	
	u16 d1,d2;
	u32 tem1,tem2;
	double fac; 	
	u16 outtime=0;
 	cnt=0;
	Drow_Touch_Point(tp_pianyi, tp_pianyi); //画点1
	while(1)
    {
		if(Penirq == 0) //按键按下了
        {
			while(!TP_Read_XY2(&tp_pixad.x, &tp_pixad.y));
			delay_ms(10);
			while(!TP_Read_XY2(&x1, &y1));
			if(tp_pixad.x == x1 && tp_pixad.y == y1)
			{
				GUI_DispHex(tp_pixad.x,4);
			}
			
		}
	}
}


////////////////////////////////////////////
 //数组指针
  static int lcd_x[5]={0,399,15,400-16,0};
  static int lcd_y[5]={0,239,15,240-16,0};
  static int Adc_x[5]={3820,150,3820,150,0};
  static int Adc_y[5]={3760,380,3760,380,0};
  
  void Init_touch_adj(void)
  {
	  GUI_TOUCH_EnableCalibration(1);//启用
	  GUI_TOUCH_CalcCoefficients(2,lcd_x,lcd_y,Adc_x,Adc_y,400,240);
  }
  
  void ReadTouch(void)
  {
//	  static GUI_PID_STATE State;
//	  static int IsPressed;
//	  int   x;
//	  int	y;
//	  if(Penirq == 0)
//	  {
//		    //
//			//设置按下的标志
//			//
//			IsPressed =  1 ;
//			State.x = TP_Read_XOY(0XD0);  //读取x的A / D值
//			State.y = TP_Read_XOY(0X90);  //读取y的A / D值
//			State.Pressed =  1 ;     	//将Pressed设置为0
//			//
//			//将触摸传递给emWin，它会自动校准
//			//
//			GUI_TOUCH_StoreStateEx(&State);
//	  }
//	  else
//	  {
//		  if(IsPressed)
//		  {
//			  IsPressed = 0;
//			  State.Pressed =  0;
//			  State.x = -1;
//			  State.y = -1;
//		  }
//		  //
//		  //将触摸传递给emWin，它会自动校准
//		  //
//		  GUI_TOUCH_StoreStateEx(&State);
//	  }


////////////////////////////////////////////////////////////
	  static U16 xOld;
	  static U16 yOld;
      static U8  PressedOld;
      U16 x, y, xDiff, yDiff;
      U8  Pressed;
	  Pressed = Penirq;
	  if (Pressed) {
        x = TP_Read_XOY(0XD0);// TBD: Insert function which reads current x value
        y = TP_Read_XOY(0X90);// TBD: Insert function which reads current y value
          //
          // The touch has already been pressed
          //
      if (PressedOld == 1) {
        //
        // Calculate difference between new and old position
        //
        xDiff = (x > xOld) ? (x - xOld) : (xOld - x);
        yDiff = (y > yOld) ? (y - yOld) : (yOld - y);
        //
        // Store state if new position differs significantly from old position
        //
        if (xDiff + yDiff > 2) {
          xOld = x;
          yOld = y;
          GUI_TOUCH_StoreState(x, y);
        }
      }
      //
      // The touch was previously released
      // Store state regardless position
      //
    } else {
      if ((x != 0) && (y != 0)) {
        xOld = x;
        yOld = y;
        PressedOld = 1;
        GUI_TOUCH_StoreState(x, y);
      }
    }
    //
    // Touch screen is not pressed
    // Store state if it was released recently
    //
  } else {
    if (PressedOld == 1) {
      PressedOld = 0;
      GUI_TOUCH_StoreState(-1, -1);
    }
  }
  }